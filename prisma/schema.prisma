// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model User {
  id              String      @id @default(uuid())
  firstName       String      @default("")
  lastName        String      @default("")
  email           String      @unique
  password        String
  role            UserRole
  stores          UserStore[]
  createdTickets  Ticket[]    @relation("CreatedTickets")
  assignedTickets Ticket[]    @relation("AssignedTickets")
  messages        Message[]   @relation("UserMessages")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  accounts        Account[]
  sessions        Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
}

model Store {
  id          Int          @id @default(autoincrement())
  name        String
  company     String
  address     String
  users       UserStore[]
  customers   Customer[]
  tickets     Ticket[]
  ticketTypes TicketType[]
  CustomerCards CustomerCard[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model UserStore {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, storeId])
}

model Customer {
  id             Int      @id @default(autoincrement())
  externalId     Int?     @unique
  firstName      String?  
  lastName       String?  
  address        String?  
  postalCode     String?  
  city           String?  
  country        String?  
  dateOfBirth    DateTime? 
  email          String   // Behåll email som required om du vill kunna identifiera kunden unikt, annars gör även den valfri
  phoneNumber    String?  
  newsletter     Boolean  @default(false)
  loyal          Boolean  @default(false)
  dynamicFields  Json?    @default("{}")
  storeId        Int
  store          Store    @relation(fields: [storeId], references: [id])
  tickets        Ticket[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([email, storeId])
  @@unique([externalId, storeId], name: "externalId_storeId")
}

model CustomerCard {
  cardName       String?
  id             Int      @id @default(autoincrement())
  firstName      String?  
  lastName       String?  
  address        String?  
  postalCode     String?  
  city           String?  
  country        String?  
  dateOfBirth    DateTime?
  email          String?  
  phoneNumber    String?
  newsletter     Boolean  @default(false)
  loyal          Boolean  @default(false)
  // Dynamiska fält sparas som JSON – använd ett defaultvärde om ingen data skickas
  dynamicFields  Json?    @default("{}")
  // Flagga för om detta är kundkortet som ska vara förvalt
  isDefault      Boolean  @default(false)
  
  storeId        Int
  store          Store    @relation(fields: [storeId], references: [id])
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model TicketType {
  id      Int           @id @default(autoincrement())
  name    String
  storeId Int
  store   Store         @relation(fields: [storeId], references: [id])
  fields  TicketField[]
  tickets Ticket[]
}

model TicketField {
  id           Int        @id @default(autoincrement())
  name         String
  fieldType    FieldType
  isRequired   Boolean    @default(false)
  ticketTypeId Int
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
}

enum FieldType {
  TEXT
  NUMBER
  DATE
  DUE_DATE
}

model Ticket {
  id             Int                @id @default(autoincrement())
  title          String?
  description    String?
  status         TicketStatus?      @default(OPEN)
  customStatusId Int?
  customerId     Int
  assignedTo     String?
  storeId        Int
  userId         String
  ticketTypeId   Int
  dueDate        DateTime?
  store          Store              @relation(fields: [storeId], references: [id])
  user           User               @relation("CreatedTickets", fields: [userId], references: [id])
  ticketType     TicketType         @relation(fields: [ticketTypeId], references: [id])
  dynamicFields  Json
  customer       Customer           @relation(fields: [customerId], references: [id])
  assignedUser   User?              @relation("AssignedTickets", fields: [assignedTo], references: [id])
  customStatus   UserTicketStatus?  @relation("TicketCustomStatus", fields: [customStatusId], references: [id])
  messages       Message[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model UserTicketStatus {
  id             Int           @id @default(autoincrement())
  name           String
  color          String        @default("#ffffff") // Standardfärg
  storeId        Int
  dynamicFields  Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  tickets        Ticket[]      @relation("TicketCustomStatus")
  mailTemplateId Int?          
  mailTemplate   MailTemplate? @relation(fields: [mailTemplateId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  String
  ticketId  Int
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
}

model MailTemplate {
  id         Int                @id @default(autoincrement())
  name       String
  subject    String
  body       String
  storeId    Int
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  statuses   UserTicketStatus[]
}

