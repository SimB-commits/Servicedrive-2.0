// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum SubscriptionPlan {
  STARTUP
  TEAM
  GROWING
  PROFESSIONAL
}

// Definierar enum för olika användningsområden för mailmallar
enum MailTemplateUsage {
  NEW_TICKET // Bekräftelsemail för nya ärenden
  STATUS_UPDATE // Mail vid statusuppdateringar
  MANUAL // För manuella utskick
  REMINDER // Påminnelser
  FOLLOW_UP // Uppföljningsmail
}

model UserPreference {
  userId          String   @id
  selectedStoreId Int?
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model User {
  id              String          @id @default(uuid())
  firstName       String          @default("")
  lastName        String          @default("")
  email           String          @unique
  password        String
  role            UserRole
  stores          UserStore[]
  createdTickets  Ticket[]        @relation("CreatedTickets")
  assignedTickets Ticket[]        @relation("AssignedTickets")
  messages        Message[]       @relation("UserMessages")
  preference      UserPreference?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  accounts        Account[]
  sessions        Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
}

model Store {
  id               Int                    @id @default(autoincrement())
  name             String
  company          String
  address          String
  users            UserStore[]
  customers        Customer[]
  tickets          Ticket[]
  ticketTypes      TicketType[]
  CustomerCards    CustomerCard[]
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  SenderAddress    SenderAddress[]
  VerifiedDomain   VerifiedDomain[]
  templateSettings MailTemplateSettings[]
  Setting          Setting[]
  subscriptionPlan        SubscriptionPlan  @default(STARTUP)
  subscriptionStartDate   DateTime          @default(now())
  subscriptionEndDate     DateTime?         // För årliga planer
  subscriptionAutoRenew   Boolean           @default(false)
  monthlyTicketCount      Int               @default(0)
  ticketCountResetDate    DateTime          @default(now())
}

model StoreUsageMetrics {
  id                      String            @id @default(uuid())
  storeId                 Int
  store                   Store             @relation(fields: [storeId], references: [id])
  adminCount              Int               @default(1)
  customTicketTypeCount   Int               @default(0)
  customStatusCount       Int               @default(0)
  verifiedDomainCount     Int               @default(0)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
}

model UserStore {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, storeId])
}

model Customer {
  id            Int       @id @default(autoincrement())
  externalId    Int?      @unique
  firstName     String?
  lastName      String?
  address       String?
  postalCode    String?
  city          String?
  country       String?
  dateOfBirth   DateTime?
  email         String // Behåll email som required om du vill kunna identifiera kunden unikt, annars gör även den valfri
  phoneNumber   String?
  newsletter    Boolean   @default(false)
  loyal         Boolean   @default(false)
  dynamicFields Json?     @default("{}")
  storeId       Int
  store         Store     @relation(fields: [storeId], references: [id])
  tickets       Ticket[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([email, storeId])
  @@unique([externalId, storeId], name: "externalId_storeId")
}

model CustomerCard {
  cardName      String?
  id            Int       @id @default(autoincrement())
  firstName     String?
  lastName      String?
  address       String?
  postalCode    String?
  city          String?
  country       String?
  dateOfBirth   DateTime?
  email         String?
  phoneNumber   String?
  newsletter    Boolean   @default(false)
  loyal         Boolean   @default(false)
  // Dynamiska fält sparas som JSON – använd ett defaultvärde om ingen data skickas
  dynamicFields Json?     @default("{}")
  // Flagga för om detta är kundkortet som ska vara förvalt
  isDefault     Boolean   @default(false)

  storeId Int
  store   Store @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketType {
  id      Int           @id @default(autoincrement())
  name    String
  storeId Int
  store   Store         @relation(fields: [storeId], references: [id])
  fields  TicketField[]
  tickets Ticket[]
}

model TicketField {
  id           Int        @id @default(autoincrement())
  name         String
  fieldType    FieldType
  isRequired   Boolean    @default(false)
  ticketTypeId Int
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
}

enum FieldType {
  TEXT
  NUMBER
  DATE
  DUE_DATE
}

model Ticket {
  id             Int               @id @default(autoincrement())
  title          String?
  description    String?
  status         TicketStatus?     @default(OPEN)
  customStatusId Int?
  customerId     Int
  assignedTo     String?
  storeId        Int
  userId         String
  ticketTypeId   Int
  dueDate        DateTime?
  store          Store             @relation(fields: [storeId], references: [id])
  user           User              @relation("CreatedTickets", fields: [userId], references: [id])
  ticketType     TicketType        @relation(fields: [ticketTypeId], references: [id])
  dynamicFields  Json
  customer       Customer          @relation(fields: [customerId], references: [id])
  assignedUser   User?             @relation("AssignedTickets", fields: [assignedTo], references: [id])
  customStatus   UserTicketStatus? @relation("TicketCustomStatus", fields: [customStatusId], references: [id])
  messages       Message[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model UserTicketStatus {
  id            Int      @id @default(autoincrement())
  name          String
  color         String   @default("#ffffff") // Standardfärg
  storeId       Int
  dynamicFields Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tickets        Ticket[]      @relation("TicketCustomStatus")
  mailTemplateId Int?
  mailTemplate   MailTemplate? @relation(fields: [mailTemplateId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  senderId  String? // Användaren som skickade meddelandet (null för kundmeddelanden)
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  sender    User?    @relation("UserMessages", fields: [senderId], references: [id])
  createdAt DateTime @default(now())

  // Nya fält för email-kommunikation
  isFromCustomer  Boolean @default(false) // Anger om meddelandet kom från kunden
  emailFrom       String? // Avsändarens email
  emailTo         String? // Mottagarens email
  emailSubject    String? // Ämne
  emailMessageId  String? // SendGrid:s Message ID
  emailInReplyTo  String? // In-Reply-To header
  emailReferences String? // References header
  emailReplyTo    String? // Reply-To header som användes

  // Indexera för snabbare sökningar
  @@index([ticketId, createdAt])
  @@index([senderId])
  @@index([isFromCustomer])
  @@index([emailMessageId])
}

model MailTemplate {
  id        Int      @id @default(autoincrement())
  name      String
  subject   String
  body      String
  storeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  statuses         UserTicketStatus[]
  templateSettings MailTemplateSettings[]
}

model MailTemplateSettings {
  id         Int               @id @default(autoincrement())
  storeId    Int
  templateId Int?
  usage      MailTemplateUsage

  store    Store         @relation(fields: [storeId], references: [id])
  template MailTemplate? @relation(fields: [templateId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([storeId, usage])
  @@index([storeId, usage])
}

// Modell för att lagra verifierade avsändaradresser per butik
model SenderAddress {
  id        Int      @id @default(autoincrement())
  storeId   Int
  email     String
  name      String?
  isDefault Boolean  @default(false)
  store     Store    @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([storeId, email])
  @@index([storeId, isDefault])
}

// Modell för att lagra statusen för verifierade domäner
model VerifiedDomain {
  id         Int       @id @default(autoincrement())
  domain     String
  domainId   String    @unique // SendGrid-ID för domänen
  storeId    Int
  store      Store     @relation(fields: [storeId], references: [id])
  status     String    @default("pending") // 'pending', 'verified', 'failed'
  createdAt  DateTime  @default(now())
  verifiedAt DateTime? // Tidpunkt när domänen verifierades
  updatedAt  DateTime  @updatedAt

  @@unique([domain, storeId])
}

model Setting {
  key       String
  value     String
  storeId   Int
  store     Store    @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([key, storeId])
  @@index([storeId])
}
